name: Publish new version to crates.io

on:
  push:
    branches:
      - check-semver-pre-publish

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  publish-pipeline:
    name: Test and publish new version to crates.io
    runs-on: ubuntu-latest
    needs:
      - pre-publish-crate
    steps:
      - run: exit 0

  pre-publish-crate:
    # if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@ebc272edf71c776b7f9a92a920c92f001eb2239f

      # - name: Install rust
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: nightly
      #     profile: minimal
      #     override: true

      # - name: Check for semver violations
      #   run: |
      #     # Record the current git sha, so we can come back to it after generating the baseline.
      #     export CURRENT_GIT_SHA="$(git rev-parse HEAD)"

      #     # Switch to the tag for the correct baseline version,
      #     # then build rustdoc JSON.
      #     #
      #     # We *do not* want to record and reuse the target directory path
      #     # across different git commits, since it may be at a different location
      #     # in different commits.
      #     git checkout "v$(./scripts/find_comparison_version.sh cargo-semver-checks)"
      #     cargo rustdoc -- -Zunstable-options --output-format json
      #     mv "$(cargo metadata --format-version 1 | jq -r .target_directory)/doc/cargo_semver_checks.json" /tmp/baseline.json

      #     # Return to the original git sha.
      #     git checkout "$CURRENT_GIT_SHA"

      #     # Build rustdoc JSON for the current version, and move it to /tmp/
      #     # so it doesn't get overwritten by the baseline build.
      #     cargo rustdoc -- -Zunstable-options --output-format json
      #     mv "$(cargo metadata --format-version 1 | jq -r .target_directory)/doc/cargo_semver_checks.json" /tmp/current.json

      #     # Check for semver violations.
      #     cargo run --release -- semver-checks check-release --current /tmp/current.json --baseline /tmp/baseline.json
